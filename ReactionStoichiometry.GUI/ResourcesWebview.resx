<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cssContent" xml:space="preserve">
    <value>body {
  font-family: Arial, sans-serif;
}

p.cre {
    margin-left: auto;
    margin-right: auto;
    width: 80%;
    /*font-family: monospace;*/
    font-family: 'IBM Plex Sans';
    font-size: larger;
    text-align: center;
    border: 1px solid gray;
    padding: 10px;
    word-wrap: break-word;
}

table.matrix {
  margin-left: auto;
  margin-right: auto;
  border: 2px solid #FFFFFF;
  text-align: center;
  border-collapse: collapse;
  font-family: monospace;
  table-layout: fixed;
}

table.matrix thead {
  border-bottom: 2px solid #333333;
}
table.matrix thead th {
  font-weight: bold;
  text-align: center;
  vertical-align: top;
}
table.matrix thead th:first-child {
  border-left: none;
}
table.matrix th {
  padding: 0px 4px;
}
table.matrix td {
  text-align: right;
  vertical-align: bottom;
}
table.matrix tfoot th {
  border-top: 2px solid #333333;
  transform: rotate(180deg);
  writing-mode: vertical-lr;
  padding: 3px 3px;
  text-align: center;
  vertical-align: bottom;
}

.multiple-columns-container {
  display: flex;
}

.first-column,
.second-column,
.third-column {
  flex: 1;
  text-align: center;
}</value>
  </data>
  <data name="htmlContent" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;ReactionStoichiometry.JsonViewer&lt;/title&gt;
	&lt;link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&amp;display=swap" rel="stylesheet"&gt;&lt;link rel="stylesheet" type="text/css" href="ReactionStoichiometry.JsonViewer.css"&gt;
    &lt;style type='text/css'&gt;%cssContent%&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;script type='text/javascript'&gt;
        %jsContent%;
        const jsonobject = %jsonContent%;
        MakeJsonReadable(jsonobject, "Solution");
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;/body&gt;
&lt;/html&gt;
</value>
  </data>
  <data name="jsContent" xml:space="preserve">
    <value>const INTERPUNCT = "\u00B7";
const EQUILIBRIUM = '\u21CC';

function MakeJsonReadable(Equation, identifier) {
  Equation.Substances = Equation.Substances.map((substance) =&gt;
    substance.replace(/(\d+(\.\d+)?)/g, "&lt;sub&gt;$1&lt;/sub&gt;")
  );

  Equation.Labels = Equation.Labels.map((label) =&gt;
    label.replace(/(\d+(\.\d+)?)/g, "&lt;sub&gt;$1&lt;/sub&gt;")
  );

  if (Equation.GeneralizedSolution.AlgebraicExpressions) {
    Equation.GeneralizedSolution.AlgebraicExpressions =
      Equation.GeneralizedSolution.AlgebraicExpressions.map((expression) =&gt;
        expression.replace(/(?&lt;=x)\d{2}/g, "&lt;sub&gt;$&amp;&lt;/sub&gt;")
      );
  }

  const tableCCM = createTable(
    Equation.CCM,
    (index) =&gt; Equation.Elements[index],
    (index) =&gt; Equation.Labels[index],
    (index) =&gt; Equation.Substances[index]
  );

  const tableRREF = createTable(
    Equation.RREF,
    (index) =&gt; "0" + " = ",
    (index) =&gt; Equation.Labels[index]
  );

  const recordDiv = document.createElement("div");
  recordDiv.style.border = "1px solid black";
  recordDiv.style.padding = "10px";
  recordDiv.style.width = "100%";
  recordDiv.innerHTML = `&lt;h3&gt;${identifier}&lt;/h3&gt;`;
  recordDiv.innerHTML += `
  &lt;div class="multiple-columns-container"&gt;
    &lt;div class="first-column"&gt;
      We begin by expressing the original input
      &lt;p class="cre"&gt;${Equation.OriginalEquationString.replace('=', ' = ')}&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="second-column"&gt;
      in its generalized form of
      &lt;p class="cre"&gt;${constructGeneralizedEquation(Equation)}&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;`;

  var thirdMatrix;
  if (Equation.GeneralizedSolution.Success === false) {
    thirdMatrix = `That results in an identity matrix, indicating that &lt;u&gt;it's impossible to balance the equation&lt;/u&gt;.`;
  } else {
    Equation.GeneralizedSolution.FreeVariableIndices.forEach((index) =&gt; Equation.Labels[index] = `&lt;mark&gt;${Equation.Labels[index]}&lt;/mark&gt;`);
    thirdMatrix = `The RREF shows how all coefficients can be expressed via &lt;mark&gt;${Equation.GeneralizedSolution.FreeVariableIndices.length} ${
      Equation.GeneralizedSolution.FreeVariableIndices.length &gt; 1
        ? "free variables"
        : "free variable"
    }&lt;/mark&gt;:
    ${
      createTable(
        Equation.GeneralizedSolution.AlgebraicExpressions.map((item) =&gt; item.includes('=')?[item.split("=")[1].trim()]:["&lt;i&gt;free&lt;/i&gt;"]),
        (index) =&gt; Equation.Labels[index] + ' =',
        () =&gt; "Expression"
      ).outerHTML
    }
    `;
  }

  recordDiv.innerHTML += `
  &lt;div class="multiple-columns-container"&gt;
    &lt;div class="first-column"&gt;
      Following this, a chemical composition matrix (CCM) is constructed: ${tableCCM.outerHTML}
    &lt;/div&gt;
    &lt;div class="second-column"&gt;
      Then we get CCM in reduced row echelon form (RREF) using &lt;u&gt;Gaussian elimination&lt;/u&gt;: ${tableRREF.outerHTML}
    &lt;/div&gt;
    &lt;div class="third-column"&gt;
      ${thirdMatrix}
    &lt;/div&gt;
  &lt;/div&gt;`;

  if (Equation.GeneralizedSolution.Success === true) {
    if (Equation.GeneralizedSolution.FreeVariableIndices.length === 1) {
      recordDiv.innerHTML += `
      &lt;div class="multiple-columns-container"&gt;
        &lt;div class="first-column"&gt;
        The free variable equal to &lt;u&gt;the lowest common multiple among the denominators of non-zero expressions&lt;/u&gt; produces all-integer solution of: ${
        createTable(
          Equation.Labels.map((item, index) =&gt; [
            Equation.GeneralizedSolution.SimplestSolution[index],
          ]),
          (index) =&gt; Equation.Labels[index] + " = ",
          () =&gt; "Value"
        ).outerHTML
      }
        &lt;/div&gt;
        &lt;div class="second-column"&gt;
        So the final solution is &lt;p class="cre"&gt;${AssembleEquationString(
          Equation.Substances,
          Equation.GeneralizedSolution.SimplestSolution
        )}
        &lt;/div&gt;
      &lt;/div&gt;
      `;
    } else {
      var inverseMatrix, firstResult, secondResult;
      if (Equation.InverseBasedSolution.Success) {
        inverseMatrix = createTable(
          Equation.InverseBasedSolution.InverseMatrix,
          (index) =&gt; index,
          (index) =&gt; index,
        ).outerHTML;

        tableInverseBasedReactions = createTable(
          Equation.InverseBasedSolution.IndependentSetsOfCoefficients,
          (index) =&gt; "0" + " = ",
          (index) =&gt; Equation.Substances[index]
        );
        firstResult = `Any balancing solution is a combination of the following 'independent reactions': ${tableInverseBasedReactions.outerHTML}
        ${Equation.InverseBasedSolution.IndependentSetsOfCoefficients.map((vector) =&gt;
          `&lt;p class="cre"&gt;${AssembleEquationString(Equation.Substances, vector, true)}`)}`;

        if (Equation.InverseBasedSolution.CombinationSample.Item2) {
          const tableCombination = createTable(
            Equation.Labels.map((item, index) =&gt; [
              Equation.InverseBasedSolution.CombinationSample.Item2[index],
            ]),
            (index) =&gt; Equation.Labels[index] + " = ",
            () =&gt; "Value"
          );
          secondResult = `For example, &lt;u&gt;(${Equation.InverseBasedSolution.CombinationSample.Item1}) 
          combination&lt;/u&gt; of those yields a solution: ${tableCombination.outerHTML}
          &lt;p class="cre"&gt;${AssembleEquationString(
            Equation.Substances,
            Equation.InverseBasedSolution.CombinationSample.Item2
          )}`;
        }
        else
        {
          secondResult = `We couldn't find a simple combination of those. Use 'Instantiation tool' in the GUI`
        }
      }
      else
      {
        inverseMatrix = "Determinant of augmented RREF is 0, and RREF&lt;sup&gt;-1&lt;/sup&gt; does not exist";
        firstResult = "WE FAILED";
        secondResult = "SO SORRY";
      }
      recordDiv.innerHTML += `
      &lt;div class="multiple-columns-container"&gt;
        &lt;div class="first-column"&gt;
          ${inverseMatrix}
        &lt;/div&gt;
        &lt;div class="second-column"&gt;
          ${firstResult}
        &lt;/div&gt;
        &lt;div class="third-column"&gt;
          ${secondResult}
        &lt;/div&gt;
      &lt;/div&gt;
      `;
    }
  }

  document.body.appendChild(recordDiv);
}

function constructGeneralizedEquation(record) {
  let result = "";
  result = Array.from(
    { length: record.Substances.length },
    (_, index) =&gt; record.Labels[index] + INTERPUNCT + record.Substances[index]
  ).join(" + ");
  return result + " = 0";
}

function createTable(
  data,
  rowLabelFunc,
  labelColumnHeader,
  labelColumnFooter = null
) {
  const table = document.createElement("table");
  table.classList.add("matrix");

  const tableHead = document.createElement("thead");
  const tableRowOfColumnHeaders = document.createElement("tr");
  tableRowOfColumnHeaders.appendChild(document.createElement("th"));
  for (let index = 0; index &lt; data[0].length; index++) {
    const currentHeader = document.createElement("th");
    currentHeader.innerHTML = labelColumnHeader(index);
    tableRowOfColumnHeaders.appendChild(currentHeader);
  }
  tableHead.appendChild(tableRowOfColumnHeaders);
  table.appendChild(tableHead);

  const tableBody = document.createElement("tbody");
  data.forEach((dataRow, dataRowIndex) =&gt; {
    const currentRow = document.createElement("tr");
    const currentRowHeaderCell = document.createElement("td");
    currentRowHeaderCell.innerHTML = rowLabelFunc(dataRowIndex);
    currentRow.appendChild(currentRowHeaderCell);
    dataRow.forEach((entry) =&gt; {
      const currentCell = document.createElement("td");
      currentCell.innerHTML = entry;
      if (entry === "0") {
        currentCell.style.color = "lightgrey";
      }
      currentCell.style.border = "1px dotted grey";
      currentRow.appendChild(currentCell);
    });
    tableBody.appendChild(currentRow);
  });
  table.appendChild(tableBody);

  if (labelColumnFooter != null) {
    const tableFoot = document.createElement("tfoot");
    const tableRowOfColumnFooters = document.createElement("tr");
    tableRowOfColumnFooters.appendChild(document.createElement("th"));
    for (let index = 0; index &lt; data[0].length; index++) {
      const cell = document.createElement("th");
      cell.innerHTML = labelColumnFooter(index);
      tableRowOfColumnFooters.appendChild(cell);
    }
    tableFoot.appendChild(tableRowOfColumnFooters);
    table.appendChild(tableFoot);
  }

  return table;
}

function AssembleEquationString(substances, coefs, useEquilibriumSign = false) {
  const lhs = [];
  const rhs = [];

  for (let i = 0; i &lt; coefs.length; i++) {
    if (coefs[i] == 0) {
      continue;
    }

    let token = coefs[i] == 1 || coefs[i] == -1 ? "" : Math.abs(coefs[i]);
    if (token !== "") {
      token += INTERPUNCT;
    }

    (coefs[i] &gt; 0 ? rhs : lhs).push(token + substances[i]);
  }

  return lhs.join(" + ") + " " + (useEquilibriumSign?EQUILIBRIUM:"=") + " " + rhs.join(" + ");
}
</value>
  </data>
</root>